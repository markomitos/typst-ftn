= Евалуација решења

== Верификација успешности решења

Успешност имплементираног решења мери се његовом способношћу да обезбеди истовремену
функционалност за обе верзије библиотеке _Keras_ (2 и 3) унутар радног окружења TFF,
уз очување стабилности постојећег кода.

За потребе функционалне верификације, коришћена је _Bazel_ инфраструктура за изградњу
и тестирање, која је уграђена у TFF пројекту @bazel. _Bazel_ омогућува да се тестови покрећу
конзистентно у окружењу које симулира дистрибуирану архитектуру радног окружења TFF.
Успешна верификација је захтевала да се број јединичних тестова повећа, тако што је свака
постојећа _Keras_ 2 тестна класа прилагођена да тестира и _Keras_ 3 моделе, чиме је
осигурана покривеност кода тестовима.  Функционална верификација је спроведена на два нивоа:

- Потврда интегритета постојећег кода: Након рефакторисања, сви постојећи јединични тестови у TFF-у, који су се ослањали на _Keras_ 2 имплементације су успешно извршени, чиме је доказало да увођење нових унија типова и апстракције кроз keras_compat компоненту није нарушило интегритет верификоване логике.

- Верификација Keras 3 функционалности: Имплементацијом нових јединичних тестова, доказано је да TFF алгоритми успешно иницијализује, обучаваје и евалуираја моделе изграђене коришћењем _Keras_ 3 API-ја.

Код решења се налази на _Github_ репозиторијуму https://github.com/markomitos/tensorflow-federated/pull/1.
Тестови се могу покренути командом у листингу @lst:bazel, где _putanja_ представља путању до жељене _Bazel_ целине.
_Bazel_ целине у пројекту су одређене са _Bazel_ BUILD датотекама, где свака BUILD датотека означава
једну целину. На пример, за тестирање _metrics_ секције радног окружења TFF, путања би била
"\//tensorflow_federated/python/learning/metrics". Број тестова унутар _learning_ директоријама
пре рефакторисања је био 140, док је након реакторисања порастао на 279 тестова.

#figure((```bash
bazel test putanja
```),
caption: [Команда за покретање тестова у _Bazel_ инфраструктури, где _putanja_ представља
 путању до жељене _Bazel_ целине])<lst:bazel>

== Предности решења

Постигнутим резултатом омогућено је коришћење најновијих модела и функционалности које _Keras_ 3
нуди, као што је подршка за више _backend_ окружења, што отвара пут за будућа побољшања у радном окружењу TFF у
погледу перформанси и компатибилности. Један од модела са високим перформансама који је могуће
учитати због подршке за библиотеку _Keras_ 3 је _Gemma_ 3 @gemma3. У табели @tbl:modeli_poređenje
налази се поређење перформансе модела _Gemma_ 3 у односу на _Keras_ 2 модел GPT-2 @gpt-2.

#figure(
    table(
        columns: 3,
        align: (col, row) => (left, left, left).at(col),
        inset: 6pt,
        [#strong[Карактеристика]], [#strong[GPT-2]], [#strong[Gemma 3]],

        [Број параметара], [Од $124 M$ до $12,5 B$], [Од $270 M$ до $27 B$],
        [Контекстни прозор], [$1024$ Токена], [$8192$ Токена],
        [Оптимизација], [Није оптимизован за просечан хардвер], [Високо оптимизован за просечан хардвер],
    ),
    caption: [Поређење перформанси модела GPT-2 и Gemma 3, где M означава милион док B означава милијарду]
)<tbl:modeli_poređenje>

Након рефакторисања, FL алгоритми, као што је Федеративни просек (FedAvg), могу да прихвате
и обрађују _Keras_ 3 моделе, без потребе за изменама у самој логици алгоритма.
Компонента keras_compat је ефикасно апстраховала разлике у понашању верзија,
осигуравајући да TFF модули увек добију очекиване податке (нпр. сирове тензоре променљивих стања),
без обзира на изворну верзију библиотеке _Keras_.

Поред функционалних предности, креирање централизоване компоненте keras_compat доноси и значајне
предности у погледу одржавања кода. Сва комплексност везана за руковање верзионим разликама
је изолована унутар једног модула. Ово чини остатак TFF кода чистијим и олакшава будуће измене,
јер свака наредна адаптација захтева измене на само једном, предвидивом месту. Приступ је
минимално инвазиван, јер није захтевао дубоке промене у логици постојећих FL алгоритама,
већ само замену директних API позива позивима ка keras_compat функцијама.

== Дискусија о решењу

Тренутно решења задовољаба покриће кода тестовима. Међутим, начин на који су додати тестови
за _Keras_ 3 моделе би могоа бити побољшан рефакторисањем тестова за _Keras_ 2 моделе тако да
покривају и случаје коришћена _Keras_ 3 модела, чиме би се преполовио број тестова. Такође,
тест класе би биле прегледније. Мана спајања тест случајева је већа сложеност самих тестова,
због различитих понашања библиотеке _Keras_. Из овог разлога изабран је приступ са раздвојеним
тест случајевима.

== Утицај рефакторисања TFF екосистема

Током развоја овог решења, радно окружење TFF је ушло у процес великог
архитектонског рефакторисања. TFF тим је започео процес одвајања библиотеке
на више независних компоненти, што је значајно променило основну структуру кода.
Због ове промене, интеграција (_merge_) рефакторисаног кода описаног у овом раду
назад у главну грану TFF пројекта тренутно није изводљива без додатних адаптација
новој архитектури.

Ипак, ова околност не умањује примарни значај и успешност рада. Рефакторисање
и даље у потпуности испуњава своју основну сврху: омогућава учитавање и тренирање
напредних _Keras_ 3 модела у окружењу које је било доступно у тренутку израде.
Тиме је директно омогућено коришћење модела високих перформанси, као што је _Gemma_ 3,
за унапређење предвиђања корисничких претрага у оквиру алата _Search Everywhere_,
што је и била главна мотивација овог рада.